#!/bin/bash

echo ========================================================================
echo Before continuing make sure you already have the following information:
echo Exchange key, Exchange secret, Telegram bot token, Telegram chat id.
echo ========================================================================
read -p "press enter to continue"

echo Bot Name: ; read botname
echo Web UI User: ; read webuser
echo Web UI Pass: ; read webpass
echo Web UI Port: ; read webport
echo Stake Currency ; read stake_currency
echo Stake Amount ; read stake_amount
echo Max Open Trades ; read max_open_trades
echo Display Currency ; read display_currency
echo Exchange Name: ; read exchange_name
echo Exchange Key: ; read exchange_key
echo Exchange Secret: ; read exchange_secret
echo Telegram Token: ; read telegram_token
echo Telegram ChatID: ; read telegram_chatid
##############################################################################
echo setting variables
secretkey=$(openssl rand -hex 16)
ipaddress=$(hostname -I | cut -d' ' -f1)
##############################################################################
echo installing prerequisites
apt-get install -y git python3-pip python3-venv sudo

echo cloning repository
git clone https://github.com/freqtrade/freqtrade.git /root/$botname

echo going to $botname directory
cd /root/$botname

echo checking out git repository
git checkout develop

echo installing freqtrade
printf 'y\ny\n' | ./setup.sh --install

echo installing frequi
source .env/bin/activate
freqtrade install-ui
deactivate
##############################################################################
echo creating configuration
bash -c "cat > /root/$botname/config.json" << EOL
{
    "max_open_trades": $max_open_trades,
    "stake_currency": "$stake_currency",
    "stake_amount": $stake_amount,
    "fiat_display_currency": "$display_currency",
    "dry_run": false,

    "unfilledtimeout": {
        "buy": 10,
        "sell": 30
    },

    "bid_strategy": {
        "ask_last_balance": 0.0,
        "use_order_book": false,
        "order_book_top": 1,
        "check_depth_of_market": {
            "enabled": false,
            "bids_to_ask_delta": 1
        }
    },
    
    "order_types": {
        "buy": "limit",
        "sell": "limit",
        "emergencysell": "market",
        "forcesell": "market",
        "forcebuy": "market",
        "stoploss": "market",
        "stoploss_on_exchange": true,
        "stoploss_on_exchange_interval": 60
    },

    "exchange": {
        "name": "$exchange_name",
        "key": "$exchange_key",
        "secret": "$exchange_secret",
        "ccxt_config": {"enableRateLimit": true},
        "ccxt_async_config": {
            "enableRateLimit": true,
            "rateLimit": 200
        },

        "pair_whitelist": [
        ],

        "pair_blacklist": [
            ".*UP/$stake_currency",
            ".*DOWN/$stake_currency",
            "BUSD/$stake_currency",
            "EUR/$stake_currency",
            "AUD/$stake_currency",
            "BRL/$stake_currency",
            "GBP/$stake_currency",
            "TRY/$stake_currency",
            "TUSD/$stake_currency",
            "USDC/$stake_currency",
            "PAX/$stake_currency",
            "BIDR/$stake_currency",
            "DAI/$stake_currency",
            "IDRT/$stake_currency",
            "RUB/$stake_currency",
            "ZAR/$stake_currency",
            "NGN/$stake_currency",
            "UAH/$stake_currency",
            "VAI/$stake_currency",
            "BVND/$stake_currency",
            "PAXG/$stake_currency"
        ],

        "outdated_offset": 5,
        "markets_refresh_interval": 60
    },

    "pairlists": [
        {
            "method": "VolumePairList",
            "number_assets": 350,
            "sort_key": "quoteVolume",
            "refresh_period": 1800
        },
        {"method": "AgeFilter", "min_days_listed": 5},
        {"method": "PrecisionFilter"},
        {"method": "PriceFilter", "low_price_ratio": 0.01, "min_price": 0.00000010},
        {"method": "SpreadFilter", "max_spread_ratio": 0.005},
        {"method": "ShuffleFilter"},
        {
            "method": "RangeStabilityFilter",
            "lookback_days": 10,
            "min_rate_of_change": 0.03,
            "refresh_period": 1440
        }
    ],

    "protections": [
        {
            "method": "StoplossGuard",
            "lookback_period_candles": 60,
            "trade_limit": 4,
            "stop_duration_candles": 60,
            "only_per_pair": false
        },
        {
            "method": "CooldownPeriod",
            "stop_duration_candles": 1
        },
        {
            "method": "MaxDrawdown",
            "lookback_period_candles": 200,
            "trade_limit": 20,
            "stop_duration_candles": 10,
            "max_allowed_drawdown": 0.2
        },
        {
            "method": "LowProfitPairs",
            "lookback_period_candles": 360,
            "trade_limit": 2,
            "stop_duration_candles": 12,
            "required_profit": 0.02
        }
    ],

    "api_server": {
        "enabled": true,
        "listen_ip_address": "$ipaddress",
        "listen_port": $webport,
        "verbosity": "error",
        "enable_openapi": false,
        "jwt_secret_key": "$secretkey",
        "CORS_origins": [],
        "username": "$webuser",
        "password": "$webpass"
    },

    "telegram": {
        "enabled": true,
        "token": "$telegram_token",
        "chat_id": "$telegram_chatid",
        "keyboard": [
          ["/daily", "/profit", "/count"],
          ["/status table", "/stats", "/trades"]
      ]
    },

    "initial_state": "stopped"
}
EOL
##############################################################################
echo creating strategy
bash -c "cat > /root/$botname/user_data/strategies/$botname.py" << EOL
from freqtrade.strategy.interface import IStrategy
from typing import Dict, List
from functools import reduce
from pandas import DataFrame
import talib.abstract as ta
import freqtrade.vendor.qtpylib.indicators as qtpylib
class $botname(IStrategy):

    stoploss = -0.3
    timeframe = '5m'
    trailing_stop = True
    trailing_stop_positive = 0.01
    trailing_stop_positive_offset = 0.02
    trailing_only_offset_is_reached = True

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        macd = ta.MACD(dataframe)
        dataframe['macd'] = macd['macd']
        dataframe['macdsignal'] = macd['macdsignal']
        dataframe['macdhist'] = macd['macdhist']
        dataframe['cci'] = ta.CCI(dataframe)
        dataframe['rsi'] = ta.RSI(dataframe)
        return dataframe

    def populate_buy_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        dataframe.loc[
            (
                (dataframe['rsi'] < 50) &
                qtpylib.crossed_above(dataframe['macd'], dataframe['macdsignal']) &
                (dataframe['cci'] <= -50.0)
            ),
            'buy'] = 1
        return dataframe

    def populate_sell_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        dataframe.loc[
            (
                (dataframe['rsi'] > 70) &
                qtpylib.crossed_below(dataframe['macd'], dataframe['macdsignal']) &
                (dataframe['cci'] >= 100.0)
            ),
            'sell'] = 1
        return dataframe
EOL
##############################################################################
echo creating service
bash -c "cat > /etc/systemd/system/$botname.service" << EOL
Description=$botname service
After=network.target
[Service]
ExecStart=/bin/bash -c "cd /root/$botname ; source .env/bin/activate ; freqtrade trade --strategy $botname"
Restart=always
StandardError=append:/var/log/$botname.log
[Install]
WantedBy=multi-user.target
EOL

systemctl daemon-reload
systemctl enable $botname.service
systemctl start $botname.service
##############################################################################
echo creating update script
bash -c "cat > /root/$botname/freqUpdate" << EOL
#!/bin/bash

cd /root/$botname
echo updating freqtrade
printf 'y\ny\n' | ./setup.sh --update

echo updating freqUI
source .env/bin/activate
freqtrade install-ui
deactivate

echo restarting freqtrade
systemctl restart $botname.service
EOL
chmod +x /root/$botname/freqUpdate

echo =========================================================================================
echo The installation has been completed. Your bot should talk to you on Telegram.
echo Your bot service is running, but the trader is stopped. This is intentional.
echo Confirm config.json is as you want it and start the trader by running /start on Telegram.
echo You can also access the bot at http://$(hostname -I | cut -d' ' -f1):$webport
echo You can login using username:$webuser password:$webpass
echo =========================================================================================
