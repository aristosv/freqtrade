#!/bin/bash

botname=freqtrade1

################################################################

echo installing prerequisites
apt-get install -y git python3-pip python3-venv sudo

echo cloning repository
git clone https://github.com/freqtrade/freqtrade.git

echo renaming directory
mv freqtrade $botname

echo changing directory
cd /root/$botname

echo checking out git repository
git checkout develop

echo installing bot
printf 'y\ny\n' | ./setup.sh --install

################################################################

bash -c "cat > /root/$botname/config.json" << EOL
{
    "dry_run": true,
    "ticker_interval": "5m",
    "max_open_trades": -1,
    "tradable_balance_ratio": 1.00,
    "stake_currency": "USDT",
    "stake_amount": 100,
    "fiat_display_currency": "USD",
    "amend_last_stake_amount": true,
    "dry_run_wallet": 100000,

    "unfilledtimeout": {
        "buy": 10,
        "sell": 30
    },
    "bid_strategy": {
        "ask_last_balance": 0.0,
        "use_order_book": false,
        "order_book_top": 1,
        "check_depth_of_market": {
            "enabled": false,
            "bids_to_ask_delta": 1
        }
    },
    "ask_strategy":{
        "use_order_book": false,
        "order_book_min": 1,
        "order_book_max": 1,
        "use_sell_signal": true,
        "sell_profit_only": false,
        "ignore_roi_if_buy_signal": false
    },
    "exchange": {
        "name": "binance",
        "key": "",
        "secret": "",
        "ccxt_config": {"enableRateLimit": true},
        "ccxt_async_config": {
            "enableRateLimit": true,
            "rateLimit": 200
        },
        "pair_whitelist": [
		"AAVE/USDT",
		"ADA/USDT",
		"AION/USDT",
		"AKRO/USDT",
		"ALGO/USDT",
		"ALPHA/USDT",
		"ANKR/USDT",
		"ANT/USDT",
		"ARDR/USDT",
		"ARPA/USDT",
		"ATOM/USDT",
		"AUD/USDT",
		"AUDIO/USDT",
		"AVA/USDT",
		"AVAX/USDT",
		"AXS/USDT",
		"BAL/USDT",
		"BAND/USDT",
		"BAT/USDT",
		"BCH/USDT",
		"BEAM/USDT",
		"BEL/USDT",
		"BLZ/USDT",
		"BNB/USDT",
		"BNT/USDT",
		"BTC/USDT",
		"BTS/USDT",
		"BTT/USDT",
		"BZRX/USDT",
		"CELR/USDT",
		"CHR/USDT",
		"CHZ/USDT",
		"COCOS/USDT",
		"COMP/USDT",
		"COS/USDT",
		"COTI/USDT",
		"CRV/USDT",
		"CTK/USDT",
		"CTSI/USDT",
		"CTXC/USDT",
		"CVC/USDT",
		"DASH/USDT",
		"DATA/USDT",
		"DCR/USDT",
		"DENT/USDT",
		"DGB/USDT",
		"DIA/USDT",
		"DNT/USDT",
		"DOCK/USDT",
		"DOGE/USDT",
		"DOT/USDT",
		"DREP/USDT",
		"DUSK/USDT",
		"EGLD/USDT",
		"ENJ/USDT",
		"EOS/USDT",
		"ETC/USDT",
		"ETH/USDT",
		"FET/USDT",
		"FIL/USDT",
		"FIO/USDT",
		"FLM/USDT",
		"FTM/USDT",
		"FTT/USDT",
		"FUN/USDT",
		"GRT/USDT",
		"GTO/USDT",
		"GXS/USDT",
		"HARD/USDT",
		"HBAR/USDT",
		"HIVE/USDT",
		"HNT/USDT",
		"HOT/USDT",
		"ICX/USDT",
		"INJ/USDT",
		"IOST/USDT",
		"IOTA/USDT",
		"IOTX/USDT",
		"IRIS/USDT",
		"JST/USDT",
		"KAVA/USDT",
		"KEY/USDT",
		"KMD/USDT",
		"KNC/USDT",
		"KSM/USDT",
		"LINK/USDT",
		"LRC/USDT",
		"LSK/USDT",
		"LTC/USDT",
		"LTO/USDT",
		"LUNA/USDT",
		"MANA/USDT",
		"MATIC/USDT",
		"MBL/USDT",
		"MDT/USDT",
		"MFT/USDT",
		"MITH/USDT",
		"MKR/USDT",
		"MTL/USDT",
		"NANO/USDT",
		"NBS/USDT",
		"NEAR/USDT",
		"NEO/USDT",
		"NKN/USDT",
		"NMR/USDT",
		"NPXS/USDT",
		"NULS/USDT",
		"OCEAN/USDT",
		"OGN/USDT",
		"OMG/USDT",
		"ONE/USDT",
		"ONG/USDT",
		"ONT/USDT",
		"ORN/USDT",
		"OXT/USDT",
		"PAXG/USDT",
		"PERL/USDT",
		"PNT/USDT",
		"QTUM/USDT",
		"REN/USDT",
		"REP/USDT",
		"RLC/USDT",
		"ROSE/USDT",
		"RSR/USDT",
		"RUNE/USDT",
		"RVN/USDT",
		"SAND/USDT",
		"SC/USDT",
		"SKL/USDT",
		"SNX/USDT",
		"SOL/USDT",
		"SRM/USDT",
		"STMX/USDT",
		"STORJ/USDT",
		"STPT/USDT",
		"STRAX/USDT",
		"STX/USDT",
		"SUN/USDT",
		"SUSHI/USDT",
		"SXP/USDT",
		"TCT/USDT",
		"TFUEL/USDT",
		"THETA/USDT",
		"TOMO/USDT",
		"TRB/USDT",
		"TROY/USDT",
		"TRX/USDT",
		"UMA/USDT",
		"UNFI/USDT",
		"UNI/USDT",
		"UTK/USDT",
		"VET/USDT",
		"VITE/USDT",
		"VTHO/USDT",
		"WAN/USDT",
		"WAVES/USDT",
		"WIN/USDT",
		"WING/USDT",
		"WNXM/USDT",
		"WRX/USDT",
		"WTC/USDT",
		"XEM/USDT",
		"XLM/USDT",
		"XMR/USDT",
		"XRP/USDT",
		"XTZ/USDT",
		"XVS/USDT",
		"XZC/USDT",
		"YFI/USDT",
		"YFII/USDT",
		"ZEC/USDT",
		"ZEN/USDT",
		"ZIL/USDT",
		"ZRX/USDT"
        ],
        "pair_blacklist": [
        ]
    },
    "pairlists": [
        {"method": "StaticPairList"}
    ],
    "telegram": {
        "enabled": false,
        "token": "",
        "chat_id": "",
        "keyboard": [
          ["/daily", "/profit", "/count"],
          ["/status table", "/performance", "/logs"]
      ]
    },
    "initial_state": "stopped",
    "forcebuy_enable": false,
    "internals": {
        "process_throttle_secs": 5
    }
}
EOL

################################################################

bash -c "cat > /root/$botname/user_data/strategies/$botname.py" << EOL

from freqtrade.strategy.interface import IStrategy
from typing import Dict, List
from functools import reduce
from pandas import DataFrame

import talib.abstract as ta
import freqtrade.vendor.qtpylib.indicators as qtpylib


class $botname(IStrategy):
    """
        buy:
            MACD crosses MACD signal above
            and CCI < -50
        sell:
            MACD crosses MACD signal below
            and CCI > 100
    """

    minimal_roi = {
        "60":  0.01,
        "30":  0.03,
        "20":  0.04,
        "0":  0.05
    }

    stoploss = -0.3

    timeframe = '5m'

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:

        macd = ta.MACD(dataframe)
        dataframe['macd'] = macd['macd']
        dataframe['macdsignal'] = macd['macdsignal']
        dataframe['macdhist'] = macd['macdhist']
        dataframe['cci'] = ta.CCI(dataframe)

        return dataframe

    def populate_buy_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """
        Based on TA indicators, populates the buy signal for the given dataframe
        :param dataframe: DataFrame
        :return: DataFrame with buy column
        """
        dataframe.loc[
            (
                qtpylib.crossed_above(dataframe['macd'], dataframe['macdsignal']) &
                (dataframe['cci'] <= -50.0)
            ),
            'buy'] = 1

        return dataframe

    def populate_sell_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        """
        Based on TA indicators, populates the sell signal for the given dataframe
        :param dataframe: DataFrame
        :return: DataFrame with buy column
        """
        dataframe.loc[
            (
                qtpylib.crossed_below(dataframe['macd'], dataframe['macdsignal']) &
                (dataframe['cci'] >= 100.0)
            ),
            'sell'] = 1

        return dataframe
EOL

################################################################

bash -c "cat > /etc/systemd/system/$botname.service" << EOL
Description=$botname service
After=network.target
[Service]
ExecStart=/bin/bash -c "cd /root/$botname ; source .env/bin/activate ; freqtrade trade --strategy $botname"
Restart=always
StandardError=append:/var/log/$botname.log
[Install]
WantedBy=multi-user.target
EOL

systemctl daemon-reload
systemctl enable $botname.service

################################################################
