import freqtrade.vendor.qtpylib.indicators as qtpylib
from pandas import DataFrame, DatetimeIndex, merge
from freqtrade.strategy.interface import IStrategy
from typing import Dict, List
from functools import reduce
import talib.abstract as ta
class $class(IStrategy):

protections = [
        {
            "method": "StoplossGuard",
            "lookback_period": 1440,     # in the last 24 hours
            "trade_limit": 5,            # if 5 trades hit stoploss
            "stop_duration": 60,         # stop trading for an hour
            "only_per_pair": false       # applies to all pairs
        },
        {
            "method": "CooldownPeriod",
            "stop_duration": 5           # after closing a trade wait 5 minutes before re-buying the same pair
        },
        {
            "method": "MaxDrawdown",
            "lookback_period": 360,      # in the last 6 hours
            "trade_limit": 20,           # considering only pairs that made at least 20 trades
            "max_allowed_drawdown": 0.2, # if drawdown is more than 20%
            "stop_duration": 60          # stop all trading for 60 minutes
        },
        {
            "method": "LowProfitPairs",
            "lookback_period": 360,      # in the last 6 hours
            "trade_limit": 2,            # considering only pairs that made at least 2 trades
            "required_profit": 0.02,     # with less than 2% profit
            "stop_duration": 60          # stop trading the specific pairs for 60 minutes
        }
    ],

    stoploss = -0.4
    timeframe = '1m'
    trailing_stop = True
    trailing_stop_positive = 0.01
    trailing_stop_positive_offset = 0.02
    trailing_only_offset_is_reached = True

    def populate_indicators(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        dataframe['rsi'] = ta.RSI(dataframe, timeperiod=14)
        bollinger = qtpylib.bollinger_bands(qtpylib.typical_price(dataframe), window=20, stds=4)
        dataframe['bb_lowerband'] = bollinger['lower']
        dataframe['bb_middleband'] = bollinger['mid']
        dataframe['bb_upperband'] = bollinger['upper']
        return dataframe

    def populate_buy_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        dataframe.loc[
            (
                (dataframe['rsi'] < 30) &
                (dataframe['close'] <= 0.98 * dataframe['bb_lowerband'])
            )
            ,
            'buy'] = 1
        return dataframe

    def populate_sell_trend(self, dataframe: DataFrame, metadata: dict) -> DataFrame:
        dataframe.loc[
            (),
            'sell'] = 1
        return dataframe
